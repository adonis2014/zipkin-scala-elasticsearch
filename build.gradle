buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.2'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1"
        classpath 'org.ajoberstar:grgit:1.1.0'
    }
}

plugins {
    id 'com.jfrog.bintray' version '1.3.1'
    id 'net.researchgate.release' version '2.2.1'
}

//javadoc.options.memberLevel = JavadocMemberLevel.PACKAGE

ext {
    // Open the Git repository in the current directory.
    git = org.ajoberstar.grgit.Grgit.open(file('.'))

    // Get commit id of HEAD.
    revision = git.head().id
    // Alternative is using abbreviatedId of head() method.
    // revision = git.head().abbreviatedId

    scalaVersion = '2.11.7'
    scalaInterfaceVersion = '2.11'
    zipkinVersion = '1.25.3'
}

repositories {
    maven { url 'http://repo.typesafe.com/typesafe/releases/' }
    maven { url 'https://maven.twttr.com/' }

    // For dependencies of zipkin-elasticsearch
    maven { url "https://repo1.maven.org/maven2/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases" }
    maven { url 'https://maven.elasticsearch.org/releases' }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: "com.jfrog.artifactory-upload"
    apply from: "$rootDir/gradle/dependencies.gradle"  // common dependency versions
    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    tasks.withType(ScalaCompile) {
        scalaCompileOptions.useAnt = false
    }

    version = "${git.head().abbreviatedId}"

    compileTestScala.scalaCompileOptions.additionalParameters = ["-feature"]
    compileScala.scalaCompileOptions.additionalParameters = ["-feature"]

    test.maxParallelForks Runtime.runtime.availableProcessors()
}

dependencies {
    compile "org.scala-lang:scala-library:${scalaVersion}"
    compile "org.elasticsearch:elasticsearch:1.7.1"
    compile "org.elasticsearch:elasticsearch-shield:1.3.3"
    compile "org.elasticsearch:elasticsearch-license-plugin:1.0.0"
    compile "com.sksamuel.elastic4s:elastic4s-core_${scalaInterfaceVersion}:1.7.4" // 2.1.1
    compile "io.zipkin:zipkin-common:${commonVersions.zipkin}"
    compile "com.twitter:finagle-core_${scalaInterfaceVersion}:${commonVersions.finagle}"

    testCompile "io.zipkin:zipkin-common:${zipkinVersion}:test"
    testCompile "org.scalatest:scalatest_${scalaInterfaceVersion}:2.2.5"

    //testCompile "org.specs2:specs2-core_${scalaInterfaceVersion}:${commonVersions.specs2}"
    //testCompile "org.specs2:specs2-junit_${scalaInterfaceVersion}:${commonVersions.specs2}"
    //testCompile "org.specs2:specs2-scalacheck_${scalaInterfaceVersion}:${commonVersions.specs2}"
    testCompile "org.scalacheck:scalacheck_${scalaInterfaceVersion}:${commonVersions.scalacheck}"
    testCompile "junit:junit:4.12"
}

task specs(type: JavaExec, dependsOn: testClasses) {
    main = 'org.specs2.runner.files'
    args = ['console', 'junitxml']
    classpath sourceSets.main.runtimeClasspath
    classpath sourceSets.test.runtimeClasspath
    classpath configurations.testRuntime
    classpath configurations.runtime
}

test.dependsOn specs

// Source and JavaDoc jars for Maven Central
allprojects {
    task sourceJar(type: Jar) {
        description "An archive of the source code for Maven Central"
        classifier "sources"
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        description "An archive of the JavaDocs for Maven Central"
        classifier "javadoc"
        from javadoc
    }
}

// Custom configuration used to explicitly control the artifacts we want to publish
allprojects {
    configurations {
        zipkinUpload
    }

    // These we want for each subproject
    artifacts {
        zipkinUpload jar, javadocJar, sourceJar
    }
}

// Quick hack to visualize inter-project dependencies
task dependencyReport {
    description "Write the dependency graph of the zipkin-* projects in this repository into project-dependencies.dot for use with GraphViz."
    doLast {
        def file = new File("project-dependencies.dot")
        file.delete()
        file << "digraph {\n"
        file << "splines=ortho\n"
        rootProject.childProjects.each { item ->
            def from = item.value
            from.configurations.compile.dependencies
                    .matching { it in ProjectDependency }
                    .each { to -> file << ("\"${from.name}\" -> \"${to.name}\"\n")}
        }
        file << "}\n"
    }
}

